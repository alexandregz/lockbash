#!/usr/bin/env ruby
# lockbash v1.0
# Alexandre Espinosa Menor <aemenor@gmail.com>
#

# You can change it if you want
LOCK_FILE = ENV['HOME']+'/.lockbash'

# only bash
SH_CONFIG_FILE = ENV['HOME']+'/.bash_profile'

def existsConfigLockIntoSh(strToSh)
    IO.read(SH_CONFIG_FILE).include?(strToSh)
end

def showUsageAndExit()
  puts "Usage: #{$0} (to PATH_TO_DIR|remove|show)"
  exit 0
end


#
options = ['to', 'remove', 'show']
command=ARGV[0]
dir=ARGV[1]

if command.nil? || !options.include?(command) || (command.eql?('to') && dir.nil?)
  showUsageAndExit
end


strToSh = DATA.read.gsub("#LOCK_FILE#", LOCK_FILE)

# commands
if command.eql?('to')
  begin
    dir_realpath = File.realpath(dir)
  rescue
    puts "Incorrect directory"
    exit 0
  end
    
  File.open(SH_CONFIG_FILE, 'ab') { |f| f.write(strToSh) } if !existsConfigLockIntoSh(strToSh)
  File.open(LOCK_FILE, 'wb') { |f| f.write(dir_realpath) }

  puts "Locked to #{dir_realpath}"
elsif command.eql?('show')

    puts (!File.exists?(LOCK_FILE) ? "No locked" : %x(echo "Locked to $(/bin/cat #{LOCK_FILE})") )
elsif command.eql?('remove')
    restoreStr = File.read(SH_CONFIG_FILE).sub(strToSh, "")
    File.open(SH_CONFIG_FILE, "w") {|file| file.puts restoreStr } if existsConfigLockIntoSh(strToSh)

    File.delete(LOCK_FILE) if File.exists?(LOCK_FILE)

    puts "Lockbash removed"
end


__END__
# lock bash 
LOCK_FILE=#LOCK_FILE#

if [ -f $LOCK_FILE ]; then
	DIR_TO_LOCK=$(cat $LOCK_FILE)
	eval REALPATH=$DIR_TO_LOCK  # to expand "~/dir", for example 

        if [ -d $REALPATH ]; then
                cd $REALPATH
                echo "Locked to $DIR_TO_LOCK"
        fi
fi

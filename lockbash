#!/usr/bin/env ruby
# lockbash v1.0
# Alexandre Espinosa Menor <aemenor@gmail.com>
# GPL2 License

require "shellwords"

# You can change it if you want
LOCK_FILE = ENV['HOME']+'/.lockbash'

# only bash
SH_CONFIG_FILE = ENV['HOME']+'/.bash_profile'

#
def existsConfigLockIntoSh(strToSh)
    IO.read(SH_CONFIG_FILE).include?(strToSh)
end

def showUsageAndExit()
  puts "Usage: #{$0} (to PATH_TO_DIR|remove|show)" #|go)"
  exit 0
end

#def checkTermProgram()
#  if `echo $TERM_PROGRAM`.eql?("Apple_Terminal\n")
#    return "Terminal.app"
#  end
#
#  return "iTerm.app"
#end


#
options = ['to', 'remove', 'show'] #, 'go']
command=ARGV[0]
dir=ARGV[1]

if command.nil? || !options.include?(command) || (command.eql?('to') && dir.nil?)
  showUsageAndExit
end


strToSh = DATA.read.gsub("#LOCK_FILE#", LOCK_FILE)

# commands
if command.eql?('to')
  begin
    dir_realpath = File.realpath(dir).shellescape
  rescue
    puts "Incorrect directory"
    exit 0
  end

  File.open(SH_CONFIG_FILE, 'ab') { |f| f.write(strToSh) } if !existsConfigLockIntoSh(strToSh)
  File.open(LOCK_FILE, 'wb') { |f| f.write(dir_realpath) }

  puts "Locked to #{dir_realpath}"

#elsif command.eql?('go')

#    puts (!File.exists?(LOCK_FILE) ? "No locked" : File.open(LOCK_FILE) {|f| `open -a #{checkTermProgram} #{f.readline}`} )
elsif command.eql?('show')

    puts (!File.exists?(LOCK_FILE) ? "No locked" : File.open(LOCK_FILE) {|f| "Locked to " +f.readline} )

elsif command.eql?('remove')
    restoreStr = File.read(SH_CONFIG_FILE).sub(strToSh, "")
    File.open(SH_CONFIG_FILE, "w") {|file| file.puts restoreStr } if existsConfigLockIntoSh(strToSh)

    File.delete(LOCK_FILE) if File.exists?(LOCK_FILE)

    puts "Lockbash removed"
end


__END__
# lock bash
LOCKBASH_FILE=#LOCK_FILE#

if [ -f $LOCKBASH_FILE ]; then
        LOCKBASH_DIR=$(cat $LOCKBASH_FILE)
        eval LOCKBASH_REALPATH=$LOCKBASH_DIR   # to expand "~/dir", for example

        if [ -d "$LOCKBASH_REALPATH" ]; then
                cd "$LOCKBASH_REALPATH"
                echo "Locked to $LOCKBASH_DIR"
        fi
fi
